<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  BanishBot
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace BanishBot\Api;

use \BanishBot\Configuration;
use \BanishBot\ApiClient;
use \BanishBot\ApiException;
use \BanishBot\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  BanishBot
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{

    /**
     * API Client
     * @var \BanishBot\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \BanishBot\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://9cdamip6lj.execute-api.us-east-1.amazonaws.com/Alpha');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \BanishBot\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \BanishBot\ApiClient $apiClient set the API client
     * @return UserApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * getUserProfile
     *
     * Get the Users BanishBot Profile
     *
     * @param string $user User (required)
     * @return \BanishBot\Model\GetUserProfileResponse
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function getUserProfile($user)
    {
        list($response, $statusCode, $httpHeader) = $this->getUserProfileWithHttpInfo ($user);
        return $response; 
    }


    /**
     * getUserProfileWithHttpInfo
     *
     * Get the Users BanishBot Profile
     *
     * @param string $user User (required)
     * @return Array of \BanishBot\Model\GetUserProfileResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function getUserProfileWithHttpInfo($user)
    {
        
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling getUserProfile');
        }
  
        // parse inputs
        $resourcePath = "/{user}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\BanishBot\Model\GetUserProfileResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\BanishBot\ObjectSerializer::deserialize($response, '\BanishBot\Model\GetUserProfileResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \BanishBot\ObjectSerializer::deserialize($e->getResponseBody(), '\BanishBot\Model\GetUserProfileResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * checkBanishment
     *
     * Check banishment of an item.
     *
     * @param string $user User (required)
     * @param string $banish_object Banish object (required)
     * @return \BanishBot\Model\CheckBanishmentResponse
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function checkBanishment($user, $banish_object)
    {
        list($response, $statusCode, $httpHeader) = $this->checkBanishmentWithHttpInfo ($user, $banish_object);
        return $response; 
    }


    /**
     * checkBanishmentWithHttpInfo
     *
     * Check banishment of an item.
     *
     * @param string $user User (required)
     * @param string $banish_object Banish object (required)
     * @return Array of \BanishBot\Model\CheckBanishmentResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function checkBanishmentWithHttpInfo($user, $banish_object)
    {
        
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling checkBanishment');
        }
        // verify the required parameter 'banish_object' is set
        if ($banish_object === null) {
            throw new \InvalidArgumentException('Missing the required parameter $banish_object when calling checkBanishment');
        }
  
        // parse inputs
        $resourcePath = "/{user}/{banishObject}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }// path params
        
        if ($banish_object !== null) {
            $resourcePath = str_replace(
                "{" . "banishObject" . "}",
                $this->apiClient->getSerializer()->toPathValue($banish_object),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\BanishBot\Model\CheckBanishmentResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\BanishBot\ObjectSerializer::deserialize($response, '\BanishBot\Model\CheckBanishmentResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \BanishBot\ObjectSerializer::deserialize($e->getResponseBody(), '\BanishBot\Model\CheckBanishmentResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * banishNewObject
     *
     * Banish a new object
     *
     * @param string $user User (required)
     * @param string $banished_object Banished object (required)
     * @param \BanishBot\Model\AddObjectToBanishBot $add_object_to_banish_bot Banish new Object, type could be a phone number, email address etc. Notes are human notes you may need in the future. Both of these fields are optional. (required)
     * @return \BanishBot\Model\BanishNewObjectResponse
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function banishNewObject($user, $banished_object, $add_object_to_banish_bot)
    {
        list($response, $statusCode, $httpHeader) = $this->banishNewObjectWithHttpInfo ($user, $banished_object, $add_object_to_banish_bot);
        return $response; 
    }


    /**
     * banishNewObjectWithHttpInfo
     *
     * Banish a new object
     *
     * @param string $user User (required)
     * @param string $banished_object Banished object (required)
     * @param \BanishBot\Model\AddObjectToBanishBot $add_object_to_banish_bot Banish new Object, type could be a phone number, email address etc. Notes are human notes you may need in the future. Both of these fields are optional. (required)
     * @return Array of \BanishBot\Model\BanishNewObjectResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function banishNewObjectWithHttpInfo($user, $banished_object, $add_object_to_banish_bot)
    {
        
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling banishNewObject');
        }
        // verify the required parameter 'banished_object' is set
        if ($banished_object === null) {
            throw new \InvalidArgumentException('Missing the required parameter $banished_object when calling banishNewObject');
        }
        // verify the required parameter 'add_object_to_banish_bot' is set
        if ($add_object_to_banish_bot === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_object_to_banish_bot when calling banishNewObject');
        }
  
        // parse inputs
        $resourcePath = "/{user}/{banishObject}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }// path params
        
        if ($banished_object !== null) {
            $resourcePath = str_replace(
                "{" . "banishedObject" . "}",
                $this->apiClient->getSerializer()->toPathValue($banished_object),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($add_object_to_banish_bot)) {
            $_tempBody = $add_object_to_banish_bot;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\BanishBot\Model\BanishNewObjectResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\BanishBot\ObjectSerializer::deserialize($response, '\BanishBot\Model\BanishNewObjectResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \BanishBot\ObjectSerializer::deserialize($e->getResponseBody(), '\BanishBot\Model\BanishNewObjectResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteObject
     *
     * Deletes an object from BanishBot
     *
     * @param string $user User (required)
     * @param string $banish_object Banish object (required)
     * @return \BanishBot\Model\DeleteObjectResponse
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function deleteObject($user, $banish_object)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteObjectWithHttpInfo ($user, $banish_object);
        return $response; 
    }


    /**
     * deleteObjectWithHttpInfo
     *
     * Deletes an object from BanishBot
     *
     * @param string $user User (required)
     * @param string $banish_object Banish object (required)
     * @return Array of \BanishBot\Model\DeleteObjectResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BanishBot\ApiException on non-2xx response
     */
    public function deleteObjectWithHttpInfo($user, $banish_object)
    {
        
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling deleteObject');
        }
        // verify the required parameter 'banish_object' is set
        if ($banish_object === null) {
            throw new \InvalidArgumentException('Missing the required parameter $banish_object when calling deleteObject');
        }
  
        // parse inputs
        $resourcePath = "/{user}/{banishObject}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }// path params
        
        if ($banish_object !== null) {
            $resourcePath = str_replace(
                "{" . "banishObject" . "}",
                $this->apiClient->getSerializer()->toPathValue($banish_object),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\BanishBot\Model\DeleteObjectResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\BanishBot\ObjectSerializer::deserialize($response, '\BanishBot\Model\DeleteObjectResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \BanishBot\ObjectSerializer::deserialize($e->getResponseBody(), '\BanishBot\Model\DeleteObjectResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
